strip.background = element_blank(), # clean background
panel.border     = element_blank(), # No pannel border
panel.grid.minor = element_blank(), # No grids
panel.grid.major = element_blank(), # No grids
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = NA,
fill = NA),
legend.position  = "top",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
strip.text.x = element_text(size = 18, colour = "darkgrey"),
strip.text = element_text(size = 18)
)
# Manually change things
P_Three + theme(
plot.title = element_text(face = "bold",
colour = "blue"),
plot.subtitle = element_text(face = "italic",
colour = "lightblue"),
panel.background = element_blank(), # clean background
strip.background = element_blank(), # clean background
panel.border     = element_blank(), # No pannel border
panel.grid.minor = element_blank(), # No grids
panel.grid.major = element_blank(), # No grids
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = NA,
fill = NA),
legend.position  = "top",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
strip.text.x = element_text(size = 18, colour = "darkgrey"),
strip.text = element_text(size = 18)
)
# Manually change things
P_Three + theme(
plot.title = element_text(face = "bold",
colour = "blue"),
plot.subtitle = element_text(face = "italic",
colour = "lightblue"),
panel.background = element_blank(), # clean background
strip.background = element_blank(), # clean background
panel.border     = element_blank(), # No pannel border
panel.grid.minor = element_blank(), # No grids
panel.grid.major = element_blank(), # No grids
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = NA,
fill = "red"),
legend.position  = "top",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
strip.text.x = element_text(size = 18, colour = "darkgrey"),
strip.text = element_text(size = 18)
)
# Manually change things
P_Three + theme(
plot.title = element_text(face = "bold",
colour = "blue"),
plot.subtitle = element_text(face = "italic",
colour = "lightblue"),
panel.background = element_blank(), # clean background
strip.background = element_blank(), # clean background
panel.border     = element_blank(), # No pannel border
panel.grid.minor = element_blank(), # No grids
panel.grid.major = element_blank(), # No grids
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = NA,
fill = "grey1"),
legend.position  = "top",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
strip.text.x = element_text(size = 18, colour = "darkgrey"),
strip.text = element_text(size = 18)
)
# Manually change things
P_Three + theme(
plot.title = element_text(face = "bold",
colour = "blue"),
plot.subtitle = element_text(face = "italic",
colour = "lightblue"),
panel.background = element_blank(), # clean background
strip.background = element_blank(), # clean background
panel.border     = element_blank(), # No pannel border
panel.grid.minor = element_blank(), # No grids
panel.grid.major = element_blank(), # No grids
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = NA,
fill = "grey90"),
legend.position  = "top",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
strip.text.x = element_text(size = 18, colour = "darkgrey"),
strip.text = element_text(size = 18)
)
# Manually change things
P_Three + theme(
plot.title = element_text(face = "bold",
colour = "blue"),
plot.subtitle = element_text(face = "italic",
colour = "lightblue"),
panel.background = element_blank(), # clean background
strip.background = element_blank(), # clean background
panel.border     = element_blank(), # No pannel border
panel.grid.minor = element_blank(), # No grids
panel.grid.major = element_blank(), # No grids
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = NA,
fill = "grey90"), # legend boxes
legend.position  = "bottom",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
strip.text.x = element_text(size = 18, colour = "darkgrey"),
strip.text = element_text(size = 18)
)
# Manually change things
P_Three + theme(
plot.title = element_text(face = "bold",
colour = "blue"),
plot.subtitle = element_text(face = "italic",
colour = "lightblue"),
panel.background = element_blank(), # clean background
strip.background = element_blank(), # clean background
panel.border     = element_blank(), # No pannel border
panel.grid.minor = element_blank(), # No grids
panel.grid.major = element_blank(), # No grids
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = "blue",
fill = "grey90"), # legend boxes
legend.position  = "bottom",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
strip.text.x = element_text(size = 18, colour = "darkgrey"),
strip.text = element_text(size = 18)
)
# Manually change things
P_Three + theme(
plot.title = element_text(face = "bold",
colour = "blue"),
plot.subtitle = element_text(face = "italic",
colour = "lightblue"),
panel.background = element_blank(), # clean background
strip.background = element_blank(), # clean background
panel.border     = element_blank(), # No pannel border
panel.grid.minor = element_blank(), # No grids
panel.grid.major = element_blank(), # No grids
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = "black",
fill = "grey90"), # legend boxes
legend.position  = "bottom",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
strip.text.x = element_text(size = 18, colour = "darkgrey"),
strip.text = element_text(size = 18)
)
# Manually change things
P_Three + theme(
plot.title = element_text(face = "bold",
colour = "blue"),
plot.subtitle = element_text(face = "italic",
colour = "lightblue"),
panel.background = element_blank(), # clean background
strip.background = element_blank(), # clean background
panel.border     = element_blank(), # No pannel border
panel.grid.minor = element_blank(), # No grids
panel.grid.major = element_blank(), # No grids
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = "black", # Around boxes
fill = "grey90"), # legend boxes
legend.position  = "bottom",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14)
)
# Manually change things
P_Three + theme(
plot.title = element_text(face = "bold",
colour = "blue"),
plot.subtitle = element_text(face = "italic",
colour = "lightblue"),
panel.background = element_blank(), # clean background
strip.background = element_blank(), # clean background
panel.border     = element_blank(), # No pannel border
panel.grid.minor = element_blank(), # No grids
panel.grid.major = element_blank(), # No grids
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = "black", # Around boxes
fill = "grey90"), # legend boxes
legend.position  = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
ggtheme_plot <- function() {
theme(
plot.title = element_text(size = rel(1), hjust = 0, face = "bold"),
panel.background = element_blank(),
strip.background = element_blank(),
# strip.text       = element_text(size = base_size, face = "italic"),
panel.border     = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = NA, fill = NA),
legend.position  = "top",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
strip.text.x = element_text(size = 18, colour = "darkgrey"),
strip.text = element_text(size = 18)
)
}
P_Three +
ggtheme_plot()
P_Two +
ggtheme_plot()
ggtheme_plot <- function() {
theme(
plot.title = element_text(size = rel(1), hjust = 0, face = "bold"),
panel.background = element_blank(),
strip.background = element_blank(),
# strip.text       = element_text(size = base_size, face = "italic"),
panel.border     = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = NA, fill = NA),
legend.position  = "top",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
strip.text.x = element_text(size = 12, colour = "darkgrey"),
strip.text = element_text(size = 10)
)
}
P_Three +
ggtheme_plot()
P_Three +
ggtheme_plot()
P_Two +
ggtheme_plot()
P_Three +
ggtheme_plot()
P_Two +
ggtheme_plot()
theme(
plot.title = element_text(size = rel(1), hjust = 0, face = "bold"),
panel.background = element_blank(),
strip.background = element_blank(),
# strip.text       = element_text(size = base_size, face = "italic"),
panel.border     = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = NA, fill = NA),
legend.position  = "top",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
strip.text.x = element_text(size = 12, colour = "darkgrey"),
strip.text = element_text(size = 10)
)
ggtheme_plot <- function() {
theme(
plot.title = element_text(size = rel(1), hjust = 0, face = "bold"),
panel.background = element_blank(),
strip.background = element_blank(),
# strip.text       = element_text(size = base_size, face = "italic"),
panel.border     = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_text(size = 10,
angle = 0,
face = "plain"),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.key = element_rect(colour = NA, fill = NA),
legend.position  = "top",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
strip.text.x = element_text(size = 12, colour = "darkgrey"),
strip.text = element_text(size = 10)
)
}
P_Three +
ggtheme_plot()
P_Two +
ggtheme_plot()
ggplot(data = Clean_Data) + # call ggplot with your data
geom_point(
aes(x = year, # Note that the aesthetics set your x and y variables
y = log10(tonnes)) # plot tonnes in a logaritmic scale
)  # ggplot "adds"" compo
ggplot(data = subset(Clean_Data, scientific_name %in% c("Oncorhynchus kisutch","Oncorhynchus nerka","Oncorhynchus gorbuscha"))) + # call ggplot with your data
geom_point(
aes(x = year, # Note that the aesthetics set your x and y variables
y = log10(tonnes)) # plot tonnes in a log scale
)  # ggplot "adds"" compo
ggplot(data = subset(Clean_Data, scientific_name %in% c("Oncorhynchus kisutch","Oncorhynchus nerka","Oncorhynchus gorbuscha"))) + # I can subset my data within ggplot
geom_point(
aes(x = year/10,
y = log10(tonnes)) # plot tonnes in a log scale
)  # ggplot "adds"" compo
ggplot(data = subset(Clean_Data, scientific_name %in% c("Oncorhynchus kisutch","Oncorhynchus nerka","Oncorhynchus gorbuscha"))) + # I can subset my data within ggplot
geom_point(
aes(x = year/10, # I can devide things
y = mean(tonnes)) # plot tonnes in a log scale
)  # ggplot "adds"" compo
ggplot(data = subset(Clean_Data, scientific_name %in% c("Oncorhynchus kisutch","Oncorhynchus nerka","Oncorhynchus gorbuscha"))) + # I can subset my data within ggplot
geom_point(
aes(x = year/10, # I can devide variables
y = log10(tonnes)) # plot tonnes in a log scale
)  # ggplot "adds"" compo
Example_Data <- Clean_Data %>%
filter(scientific_name %in% c("Oncorhynchus kisutch","Oncorhynchus nerka","Oncorhynchus gorbuscha"))
# All points in one color
ggplot(data = Example_Data) +
geom_point(
aes(x = year,
y = tonnes), # Note that we closed aes here!
# colour = "red", # R is inclusive!
color = "blue"
)
# Set color by species
ggplot(data = Example_Data) +
geom_point(
aes(x = year,
y = tonnes,
color = scientific_name
) # Note that we closed aes here!
)
ggplot(data = subset(Clean_Data, scientific_name %in% c("Oncorhynchus kisutch","Oncorhynchus nerka","Oncorhynchus gorbuscha"))) + # I can subset my data within ggplot
geom_point(
aes(x = reorder(year), # I can devide variables
y = log10(tonnes)) # plot tonnes in a log scale
)  # ggplot "adds"" compo
ggplot(data = subset(Clean_Data, scientific_name %in% c("Oncorhynchus kisutch","Oncorhynchus nerka","Oncorhynchus gorbuscha"))) + # I can subset my data within ggplot
geom_point(
aes(x = reorder(year), # I can devide variables
y = log10(tonnes)) # plot tonnes in a log scale
)  # ggplot "adds"" compo
ggplot(data = subset(Clean_Data, scientific_name %in% c("Oncorhynchus kisutch","Oncorhynchus nerka","Oncorhynchus gorbuscha"))) + # I can subset my data within ggplot
geom_point(
aes(x = reorder(year, year), # I can devide variables
y = log10(tonnes)) # plot tonnes in a log scale
)  # ggplot "adds"" compo
ggplot(data = subset(Clean_Data, scientific_name %in% c("Oncorhynchus kisutch","Oncorhynchus nerka","Oncorhynchus gorbuscha"))) + # I can subset my data within ggplot
geom_point(
aes(x = reorder(year, tonnes), # I can devide variables
y = log10(tonnes)) # plot tonnes in a log scale
)  # ggplot "adds"" compo
ggplot(data = subset(Clean_Data, scientific_name  == "Oncorhynchus kisutch")) + # I can subset my data within ggplot
geom_point(
aes(x = reorder(year, tonnes), # I can devide variables
y = log10(tonnes)) # plot tonnes in a log scale
)  # ggplot "adds"" compo
aes(x = year, # I can devide variables
y = reorder(log10(tonnes),year) # plot tonnes in a log scale
)  # ggplot "adds"" compo
ggplot(data = subset(Clean_Data, scientific_name  == "Oncorhynchus kisutch")) + # I can subset my data within ggplot
geom_point(
aes(x = year, # I can devide variables
y = reorder(log10(tonnes),year) # plot tonnes in a log scale
)
)# ggplot "adds"" compo
ggplot(data = subset(Clean_Data, scientific_name  == "Oncorhynchus kisutch")) + # I choose one species
geom_point(
aes(x = reorder(year, tonnes), # I can devide variables
y = log10(tonnes)) # plot tonnes in a log scale
)  # ggplot "adds"" compo
ggplot(data = subset(Clean_Data, scientific_name  == "Oncorhynchus kisutch")) + # I choose one species
geom_point(
aes(#x = reorder(year, tonnes), # Reorder the years from lowest catch to highest
x = reorder(year, desc(tonnes)), # Reorder the years from lowest catch to highest
y = log10(tonnes)) # plot tonnes in a log scale
)  # ggplot "adds"" compo
aes(x = reorder(year, tonnes), # Reorder the years from lowest catch to highest
# x = reorder(year, desc(tonnes)), # desc will invert it!
y = tonnes
)  # ggplot "adds"" compo
ggplot(data = subset(Clean_Data, scientific_name  == "Oncorhynchus kisutch")) + # I choose one species
geom_point(
aes(x = reorder(year, tonnes), # Reorder the years from lowest catch to highest
# x = reorder(year, desc(tonnes)), # desc will invert it!
y = tonnes
)
)
P_One +
geom_line( data = Example_Data,
aes(x = year,
y = tonnes/1000,
color = scientific_name
) # Note that we closed aes here!
)
P_One
P_One +
geom_line( data = Example_Data,
aes(x = year,
y = tonnes/100000,
color = scientific_name
) # Note that we closed aes here!
)
P_One +
geom_line( data = Example_Data,
aes(x = year,
y = tonnes/1000000,
color = scientific_name
) # Note that we closed aes here!
)
P_One
# Base plot
P_One <- ggplot(data = Clean_Data) + # call ggplot with your data
geom_point(
aes(x = year, # Note that the aesthetics set your x and y variables
y = tonnes/1000),
colour = "grey"
)
P_One +
geom_line( data = Example_Data,
aes(x = year,
y = tonnes,
color = scientific_name
) # Note that we closed aes here!
)
P_One +
geom_line( data = Example_Data,
aes(x = year,
y = tonnes/1000,
color = scientific_name
) # Note that we closed aes here!
)
# Base plot
P_One <- ggplot(data = Clean_Data) + # call ggplot with your data
geom_point(
aes(x = year, # Note that the aesthetics set your x and y variables
y = tonnes/10000),
colour = "grey"
)
P_One +
geom_line( data = Example_Data,
aes(x = year,
y = tonnes/10000,
color = scientific_name
) # Note that we closed aes here!
)
P_Two <- P_One +
geom_line( data = Example_Data,
aes(x = year,
y = tonnes,
color = scientific_name
) # Note that we closed aes here!
)
P_Two
